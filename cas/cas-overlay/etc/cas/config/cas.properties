cas.server.name=https://mymachine.domain.edu:8443
cas.server.prefix=https://mymachine.domain.edu:8443/cas

cas.adminPagesSecurity.ip=127\.0\.0\.1

logging.config=file:/etc/cas/config/log4j2.xml
cas.serviceRegistry.json.location=classpath:/services/active

##
# CAS Authentication Credentials
#
# disable authenticate users only from property file
cas.authn.accept.users=
##

##
# Monitor endpoints
#
# enable monitor endpoints protected by cas.adminPagesSecurity
cas.monitor.endpoints.enabled=true
cas.monitor.endpoints.sensitive=false
##

##
# Show SQL
cas.jdbc.showSql=true
cas.jdbc.genDdl=true
##

##
# Set auth from Database with Query
#
cas.authn.jdbc.query[0].sql=SELECT * FROM userentity WHERE email=?
cas.authn.jdbc.query[0].url=jdbc:postgresql://localhost:5432/postgres
cas.authn.jdbc.query[0].dialect=org.hibernate.dialect.PostgreSQL9Dialect
cas.authn.jdbc.query[0].ddl-auto=update
cas.authn.jdbc.query[0].user=admin
cas.authn.jdbc.query[0].password=admin
cas.authn.jdbc.query[0].driverClass=org.postgresql.Driver
cas.authn.jdbc.query[0].fieldPassword=password

cas.authn.attributeRepository.jdbc[0].singleRow=true
cas.authn.attributeRepository.jdbc[0].sql=SELECT * FROM userentity WHERE {0}
cas.authn.attributeRepository.jdbc[0].username=email
cas.authn.attributeRepository.jdbc[0].url=jdbc:postgresql://localhost:5432/postgres
cas.authn.attributeRepository.jdbc[0].dialect=org.hibernate.dialect.PostgreSQL9Dialect
cas.authn.attributeRepository.jdbc[0].ddl-auto=update
cas.authn.attributeRepository.jdbc[0].user=admin
cas.authn.attributeRepository.jdbc[0].password=admin
cas.authn.attributeRepository.jdbc[0].driverClass=org.postgresql.Driver
cas.authn.attributeRepository.jdbc[0].attributes.id=id
cas.authn.attributeRepository.jdbc[0].attributes.email=email
cas.authn.attributeRepository.jdbc[0].attributes.username=username
cas.authn.attributeRepository.jdbc[0].attributes.role=role
cas.authn.attributeRepository.defaultAttributesToRelease=id,email,username,role
##

##
# Set Google+ Identity Provider
#
cas.authn.pac4j.google.id=google_client_id.apps.googleusercontent.com
cas.authn.pac4j.google.secret=google_client_secret
cas.authn.pac4j.google.scope=EMAIL_AND_PROFILE
##

# Activate MFA globally for all, regardless of other settings
#cas.authn.mfa.globalProviderId=mfa-gauth

##
# Google Authenticator Authentication
#
cas.authn.mfa.gauth.windowSize=3
cas.authn.mfa.gauth.issuer=https://mymachine.domain.edu:8443/cas
cas.authn.mfa.gauth.codeDigits=6
cas.authn.mfa.gauth.label=CAS
cas.authn.mfa.gauth.timeStepSize=30
cas.authn.mfa.gauth.rank=0
#cas.authn.mfa.gauth.trustedDeviceEnabled=false
cas.authn.mfa.gauth.name=googlemfa

#cas.authn.mfa.gauth.cleaner.enabled=true
#cas.authn.mfa.gauth.cleaner.startDelay=20000
#cas.authn.mfa.gauth.cleaner.repeatInterval=60000

# cas.authn.mfa.gauth.jpa.database.healthQuery=
# cas.authn.mfa.gauth.jpa.database.isolateInternalQueries=false
# cas.authn.mfa.gauth.jpa.database.url=jdbc:postgresql://localhost:5432/postgres
# cas.authn.mfa.gauth.jpa.database.failFast=true
# cas.authn.mfa.gauth.jpa.database.dialect=org.hibernate.dialect.PostgreSQL9Dialect
# cas.authn.mfa.gauth.jpa.database.leakThreshold=10
# cas.authn.mfa.gauth.jpa.database.batchSize=1
# cas.authn.mfa.gauth.jpa.database.user=admin
# cas.authn.mfa.gauth.jpa.database.ddlAuto=update
# cas.authn.mfa.gauth.jpa.database.password=admin
# cas.authn.mfa.gauth.jpa.database.autocommit=false
# cas.authn.mfa.gauth.jpa.database.driverClass=org.postgresql.Driver
# cas.authn.mfa.gauth.jpa.database.idleTimeout=5000
# cas.authn.mfa.gauth.jpa.database.dataSourceName=
# cas.authn.mfa.gauth.jpa.database.dataSourceProxy=false

# cas.authn.mfa.gauth.jpa.database.pool.suspension=false
# cas.authn.mfa.gauth.jpa.database.pool.minSize=6
# cas.authn.mfa.gauth.jpa.database.pool.maxSize=18
# cas.authn.mfa.gauth.jpa.database.pool.maxWait=2000
##

##
# OpenID Connect clients authorization (frontend-accounting)
#
cas.authn.oidc.issuer=https://mymachine.domain.edu:8443/cas/oidc

# Skew ID tokens in minutes
# cas.authn.oidc.skew=5

# cas.authn.oidc.jwksFile=file:/keystore.jwks
# cas.authn.oidc.jwksCacheInMinutes=60

# cas.authn.oidc.dynamicClientRegistrationMode=OPEN|PROTECTED

# cas.authn.oidc.subjectTypes=public,pairwise

# Supported claims
# cas.authn.oidc.claims=sub,name,preferred_username,family_name, \
#    given_name,middle_name,given_name,profile, \
#    picture,nickname,website,zoneinfo,locale,updated_at,birthdate, \
#    email,email_verified,phone_number,phone_number_verified,address
cas.authn.oidc.claims=id,email,username

# Define custom scopes and claims
# cas.authn.oidc.userDefinedScopes.scope1=cn,givenName,photos,customAttribute
# cas.authn.oidc.userDefinedScopes.scope2=cn,givenName,photos,customAttribute2
cas.authn.oidc.userDefinedScopes.customscope=id,email,username

# Supported scopes
# cas.authn.oidc.scopes=openid,profile,email,address,phone,offline_access
cas.authn.oidc.scopes=openid,profile,email,customscope

# Map fixed claims to CAS attributes
# cas.authn.oidc.claimsMap.given_name=custom-given-name
cas.authn.oidc.claimsMap.id=id
cas.authn.oidc.claimsMap.email=email
cas.authn.oidc.claimsMap.username=username
##

##
# OAuth2 client authorization (backend)
#
cas.authn.oauth.userProfileViewType=FLAT
##

##
# Enable CORS for Demo
#
cas.httpWebRequest.cors.enabled=true
cas.httpWebRequest.cors.allowCredentials=true
cas.httpWebRequest.cors.allowOrigins[0]=*
cas.httpWebRequest.cors.allowMethods[0]=*
cas.httpWebRequest.cors.allowHeaders[0]=*
cas.httpWebRequest.cors.maxAge=3600
cas.httpWebRequest.cors.exposedHeaders[0]=
##
